From 7796ce2bb6eb1650ae1bec41ab2f270807b33c62 Mon Sep 17 00:00:00 2001
From: Donald Sharp <sharpd@nvidia.com>
Date: Thu, 25 Jan 2024 12:53:24 -0500
Subject: [PATCH 03/11] bgpd: backpressure - Add a typesafe list for Zebra
 Announcement

Modify the bgp master to hold a type safe list for bgp_dests that need
to be passed to zebra.

Future commits will use this.

Ticket: #3390099

Signed-off-by: Donald Sharp <sharpd@nvidia.com>
Signed-off-by: Rajasekar Raja <rajasekarr@nvidia.com>

diff --git a/bgpd/bgp_main.c b/bgpd/bgp_main.c
index 851c4880c..44d5ee68c 100644
--- a/bgpd/bgp_main.c
+++ b/bgpd/bgp_main.c
@@ -207,6 +207,8 @@ static __attribute__((__noreturn__)) void bgp_exit(int status)
 	bgp_evpn_mh_finish();
 	bgp_nhg_finish();
 
+	zebra_announce_fini(&bm->zebra_announce_head);
+
 	/* reverse bgp_dump_init */
 	bgp_dump_finish();
 
diff --git a/bgpd/bgp_table.h b/bgpd/bgp_table.h
index 5b4c3be21..67431ea4f 100644
--- a/bgpd/bgp_table.h
+++ b/bgpd/bgp_table.h
@@ -75,6 +75,9 @@ struct bgp_dest {
 	struct bgp_dest *pdest;
 
 	STAILQ_ENTRY(bgp_dest) pq;
+	struct bgp_path_info *za_bgp_pi;
+
+	struct zebra_announce_item zai;
 
 	uint64_t version;
 
@@ -91,12 +94,16 @@ struct bgp_dest {
 #define BGP_NODE_LABEL_REQUESTED        (1 << 7)
 #define BGP_NODE_SOFT_RECONFIG (1 << 8)
 #define BGP_NODE_PROCESS_CLEAR (1 << 9)
+#define BGP_NODE_SCHEDULE_FOR_INSTALL (1 << 10)
+#define BGP_NODE_SCHEDULE_FOR_DELETE (1 << 11)
 
 	struct bgp_addpath_node_data tx_addpath;
 
 	enum bgp_path_selection_reason reason;
 };
 
+DECLARE_LIST(zebra_announce, struct bgp_dest, zai);
+
 extern void bgp_delete_listnode(struct bgp_dest *dest);
 /*
  * bgp_table_iter_t
diff --git a/bgpd/bgpd.c b/bgpd/bgpd.c
index 337879a2d..88d4201a9 100644
--- a/bgpd/bgpd.c
+++ b/bgpd/bgpd.c
@@ -3867,10 +3867,20 @@ int bgp_delete(struct bgp *bgp)
 	afi_t afi;
 	safi_t safi;
 	int i;
+	struct bgp_dest *dest = NULL;
 	struct graceful_restart_info *gr_info;
 
 	assert(bgp);
 
+	while (zebra_announce_count(&bm->zebra_announce_head)) {
+		dest = zebra_announce_pop(&bm->zebra_announce_head);
+		if (dest->za_bgp_pi->peer->bgp == bgp) {
+			bgp_path_info_unlock(dest->za_bgp_pi);
+			bgp_dest_unlock_node(dest);
+		} else
+			zebra_announce_add_tail(&bm->zebra_announce_head, dest);
+	}
+
 	bgp_soft_reconfig_table_task_cancel(bgp, NULL, NULL);
 
 	/* make sure we withdraw any exported routes */
@@ -8296,6 +8306,8 @@ void bgp_master_init(struct event_loop *master, const int buffer_size,
 	memset(&bgp_master, 0, sizeof(bgp_master));
 
 	bm = &bgp_master;
+
+	zebra_announce_init(&bm->zebra_announce_head);
 	bm->bgp = list_new();
 	bm->listen_sockets = list_new();
 	bm->port = BGP_PORT_DEFAULT;
@@ -8314,6 +8326,7 @@ void bgp_master_init(struct event_loop *master, const int buffer_size,
 	bm->outq_limit = BM_DEFAULT_Q_LIMIT;
 	bm->t_bgp_sync_label_manager = NULL;
 	bm->t_bgp_start_label_manager = NULL;
+	bm->t_bgp_zebra_route = NULL;
 
 	bgp_mac_init();
 	/* init the rd id space.
@@ -8564,6 +8577,7 @@ void bgp_terminate(void)
 	EVENT_OFF(bm->t_rmap_update);
 	EVENT_OFF(bm->t_bgp_sync_label_manager);
 	EVENT_OFF(bm->t_bgp_start_label_manager);
+	EVENT_OFF(bm->t_bgp_zebra_route);
 
 	bgp_mac_finish();
 }
diff --git a/bgpd/bgpd.h b/bgpd/bgpd.h
index 0f6909532..a6b398a44 100644
--- a/bgpd/bgpd.h
+++ b/bgpd/bgpd.h
@@ -18,6 +18,8 @@
 #include "iana_afi.h"
 #include "asn.h"
 
+PREDECL_LIST(zebra_announce);
+
 /* For union sockunion.  */
 #include "queue.h"
 #include "sockunion.h"
@@ -170,11 +172,16 @@ struct bgp_master {
 	uint32_t inq_limit;
 	uint32_t outq_limit;
 
+	struct event *t_bgp_zebra_route;
+
 	struct event *t_bgp_sync_label_manager;
 	struct event *t_bgp_start_label_manager;
 
 	bool v6_with_v4_nexthops;
 
+	/* To preserve ordering of installations into zebra across all Vrfs */
+	struct zebra_announce_head zebra_announce_head;
+
 	QOBJ_FIELDS;
 };
 DECLARE_QOBJ_TYPE(bgp_master);
-- 
2.17.1

